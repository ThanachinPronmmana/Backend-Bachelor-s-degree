generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRES")
}

// Enums ใช้ได้เหมือนเดิม
enum UserType {
  Buyer
  Seller
  Admin
}

enum FinancialReadiness {
  Low
  High
}

enum Status_Seller {
  PENDING
  APPROVED
  REJECTED
}

enum Status_Disposit {
  PENDING
  CONFIRMED
  REJECTED
}

enum Status_Review {
  PENDING
  APPROVED
  REJECTED
}

enum PaymentType {
  CREDIT_CARD
  QR
}

enum Status_payment {
  PENDING
  CONFIRMED
  REJECTED
}

enum NegotiationStatus {
  PENDING
  SUCCESS
  FAILED
}

enum ContractStatus {
  PENDING
  SIGNED
  REJECTED
}

enum NotificationStatus {
  UNREAD
  READ
}

enum Nearby_Landmarks_list {
  BTS_MRT
  School
  Hospital
  Mall_Market
  Park
}

enum Additional_Amenities_list {
  Swimming_Pool
  Fitness_Center
  Co_working_Space
  Pet_Friendly
}

enum Sell_Rent {
  Sell
  Rent
}

enum Other_related_expenses {
  Ownership_transfer_fee
  House_insurance_fee
  Common_area_feeF
}

enum Nearby_Facilities {
  BTS_MRT
  School
  Hospital
  Mall_Market
  Park_Nature
}

enum Parking_Needs {
  oneCar
  twoCars
  Not_required
}

enum Lifestyle_Preferences {
  Work_from_Home
  Have_Pets
  Need_a_Home_Office
  Like_Gardening
}

model User {
  id                 String               @id @default(cuid())
  First_name         String
  Last_name          String
  Email              String
  Phone              String
  Password           String
  userType           UserType             @default(Buyer)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  Buyer              Buyer?
  Seller             Seller?
  PropertyPost       PropertyPost?
  Payment            Payment[]
  Contract           Contract[]
  Notification       Notification[]
  PasswordResetToken PasswordResetToken[]
}

model Buyer {
  id                    String                 @id @default(cuid())
  user                  User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String                 @unique
  DateofBirth           DateTime?
  Occaaption            String?
  Monthly_Income        Float
  Family_Size           Int
  Preferred_Province    String
  Preferred_District    String
  Parking_Needs         Parking_Needs?
  Nearby_Facilities     Nearby_Facilities?
  Lifestyle_Preferences Lifestyle_Preferences?
  Special_Requirements  String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  Deposit               Deposit[]
  DocumentUpload        DocumentUpload[]
  Negotiation           Negotiation[]
  Image                 Image[]
  Contract              Contract[]
}

model Seller {
  id                 String         @id @default(cuid())
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String         @unique
  National_ID        String
  Company_Name       String
  RealEstate_License String
  Status             Status_Seller  @default(PENDING)
  StartTime          DateTime?
  isBooked           Boolean        @default(false)
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  PropertyPost       PropertyPost[]
  Negotiation        Negotiation[]
  Contract           Contract[]
  Image              Image[]
  Setdatetime        Setdatetime[]
}

model Location {
  id           String         @id @default(cuid())
  Province     String
  District     String
  Sub_District String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  PropertyPost PropertyPost[]
}

model Category {
  id           String         @id @default(cuid())
  name         String
  PropertyPost PropertyPost[]
}

model PropertyType {
  id           String         @id @default(cuid())
  name         String
  PropertyPost PropertyPost[]
}

model PropertyPost {
  id                     String                     @id @default(cuid())
  Property_Name          String
  Price                  Float
  Usable_Area            Float
  Land_Size              Float
  Bedrooms               Int
  Bathroom               Int
  Description            String
  Deposit_Amount         Float
  Contract_Seller        String?
  LinkMap                String?
  Latitude               Float
  Longitude              Float
  Province               String
  District               String
  Subdistrict            String
  Address                String
  Total_Rooms            Int?
  Year_Built             String?
  Nearby_Landmarks       Nearby_Landmarks_list?
  Additional_Amenities   Additional_Amenities_list?
  Parking_Space          Int?
  Sell_Rent              Sell_Rent
  Other_related_expenses Other_related_expenses
  Link_line              String?
  Link_facbook           String?
  Name                   String
  Phone                  String
  Seller                 Seller                     @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId               String                     @unique
  user                   User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                 String                     @unique
  Propertytype           PropertyType               @relation(fields: [propertyTypeId], references: [id])
  propertyTypeId         String
  Category               Category                   @relation(fields: [categoryId], references: [id])
  categoryId             String
  Location               Location                   @relation(fields: [locationId], references: [id])
  locationId             String
  Deposit                Deposit[]
  createdAt              DateTime                   @default(now())
  updatedAt              DateTime                   @updatedAt
  Payment                Payment[]
  Negotiation            Negotiation[]
  Image                  Image[]
}

model Deposit {
  id             String           @id @default(cuid())
  Post           PropertyPost     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         String
  Buyer          Buyer            @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId        String
  Deposit_Status Status_Disposit
  Deposit_Amount Float
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Negotiation    Negotiation?
  DocumentUpload DocumentUpload[]
}

model DocumentType {
  id             String           @id @default(cuid())
  name           String
  DocumentUpload DocumentUpload[]
}

model DocumentUpload {
  id             String        @id @default(cuid())
  DocumentName   String
  Review_Status  Status_Review
  Rejection_Note String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Buyer          Buyer         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId        String
  DocumentType   DocumentType  @relation(fields: [typeId], references: [id])
  typeId         String
  Deposit        Deposit?      @relation(fields: [depositId], references: [id])
  depositId      String?
}

model Payment {
  id             String         @id @default(cuid())
  User           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  PropertyPost   PropertyPost   @relation(fields: [postId], references: [id])
  postId         String
  PaymentType    PaymentType
  Payment_Amount Float
  Payment_Slip   String
  Status         Status_payment
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Negotiation {
  id                String            @id @default(cuid())
  NegotiationDate   DateTime
  NegotiationStatus NegotiationStatus
  Buyer             Buyer             @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId           String
  Seller            Seller            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId          String
  PropertyPost      PropertyPost      @relation(fields: [postId], references: [id])
  postId            String
  Deposit           Deposit?          @relation(fields: [depositId], references: [id])
  depositId         String            @unique
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  Contract          Contract[]
}

model Contract {
  id                String         @id @default(cuid())
  buyerId           String
  sellerId          String
  negotiationId     String
  BuyerContractDoc  String
  BuyerUploadDate   DateTime
  SellerContractDoc String
  SellerUploadDate  DateTime
  contractStatus    ContractStatus
  buyer             Buyer          @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  seller            Seller         @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  negotiation       Negotiation    @relation(fields: [negotiationId], references: [id], onDelete: Cascade)
  User              User?          @relation(fields: [userId], references: [id])
  userId            String?
}

model Notification {
  id             String             @id @default(cuid())
  userId         String
  referenceId    String?
  Title          String
  Message        String
  Status         NotificationStatus
  createdAt      DateTime           @default(now())
  relatedProcess String?
  user           User               @relation(fields: [userId], references: [id])
}

model Image {
  id             String        @id @default(cuid())
  asset_id       String
  public_id      String
  url            String
  secure_url     String
  PropertyPost   PropertyPost? @relation(fields: [propertyPostId], references: [id])
  propertyPostId String
  Buyer          Buyer?        @relation(fields: [buyerId], references: [id])
  buyerId        String?
  Seller         Seller?       @relation(fields: [sellerId], references: [id])
  sellerId       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model Setdatetime {
  id        String   @id @default(cuid())
  Date      String
  Month     String
  Year      String
  Time      String
  Seller    Seller   @relation(fields: [sellerId], references: [id])
  sellerId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime
  createdAt DateTime @default(now())
}
